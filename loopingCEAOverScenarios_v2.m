% DESCRIPTION: Looping vaxCEA_multSims_SACEA.m over all the scenario
% numbers, cleaning the output, turning into an array, and exporting to CSV for 
% processing in R. 

% Initialize variables
[stepsPerYear , timeStep , startYear , currYear , endYear , ...
    years , disease , viral , hpvVaxStates , hpvNonVaxStates , endpoints , ...
    intervens , gender , age , risk , hpvTypeGroups , dim , k , toInd , ...
    annlz , ...
    ageSexDebut , mInit , fInit , partnersM , partnersF , maleActs , ...
    femaleActs , riskDist , fertility , fertility2 , fertility3 , fertility4 , ...
    mue , mue2 , mue3 , mue4 , epsA_vec , epsR_vec , ...
    yr , ...
    hivOn , betaHIV_mod , muHIV , kCD4 , ...
    hpvOn , beta_hpvVax_mod , beta_hpvNonVax_mod , fImm , rImmune , ...
    kCin1_Inf , kCin2_Cin1 , kCin3_Cin2 , kCC_Cin3 , rNormal_Inf , kInf_Cin1 , ...
    kCin1_Cin2 , kCin2_Cin3 , lambdaMultImm , hpv_hivClear , rImmuneHiv , ...
    c3c2Mults , c2c1Mults , c2c3Mults , c1c2Mults , muCC , kRL , kDR , artHpvMult , ...
    hpv_hivMult , maleHpvClearMult , ...
    condUse , screenYrs , hpvScreenStartYear , ...
    artYr , maxRateM , maxRateF , ...
    artYr_vec , artM_vec , artF_vec , minLim , maxLim , ...
    circ_aVec , vmmcYr_vec , vmmc_vec , vmmcYr , vmmcRate , ...
    hivStartYear , circStartYear , circNatStartYear , vaxStartYear , ...
    baseline , who , spCyto , spHpvDna , spGentyp , spAve , spHpvAve , ...
    circProtect , condProtect , MTCTRate , hyst , ...
    OMEGA , ...
    ccInc2012_dObs , ccInc2018_dObs , cc_dist_dObs , cin3_dist_dObs , ...
    cin1_dist_dObs , hpv_dist_dObs , cinPos2002_dObs , cinNeg2002_dObs , ...
    cinPos2015_dObs , cinNeg2015_dObs , hpv_hiv_dObs , hpv_hivNeg_dObs , ...
    hpv_hivM2008_dObs , hpv_hivMNeg2008_dObs , hivPrevM_dObs , hivPrevF_dObs , ...
    popAgeDist_dObs , totPopSize_dObs , ...
    hivCurr , ...
    gar , hivSus , hpvVaxSus , hpvVaxImm , hpvNonVaxSus , hpvNonVaxImm , ...
    toHiv , vaxInds , nonVInds , hpvVaxInf , hpvNonVaxInf , ...
    hivInds , ...
    cin3hpvVaxIndsFrom , ccLochpvVaxIndsTo , ccLochpvVaxIndsFrom , ...
    ccReghpvVaxInds , ccDisthpvVaxInds , cin3hpvNonVaxIndsFrom , ...
    ccLochpvNonVaxIndsTo , ccLochpvNonVaxIndsFrom , ccReghpvNonVaxInds , ...
    ccDisthpvNonVaxInds , cin1hpvVaxInds , cin2hpvVaxInds , cin3hpvVaxInds , ...
    cin1hpvNonVaxInds , cin2hpvNonVaxInds , cin3hpvNonVaxInds , normalhpvVaxInds , ...
    immunehpvVaxInds , infhpvVaxInds , normalhpvNonVaxInds , immunehpvNonVaxInds , ...
    infhpvNonVaxInds , fromVaxNoScrnInds , fromVaxScrnInds , toNonVaxNoScrnInds , ...
    toNonVaxScrnInds , ageInd , riskInd , ...
    hivNegNonVMMCinds , hivNegVMMCinds , ...
    vlAdvancer , ...
    fertMat , hivFertPosBirth , hivFertNegBirth , fertMat2 , ...
    hivFertPosBirth2 , hivFertNegBirth2 , fertMat3 , hivFertPosBirth3 , hivFertNegBirth3 , ...
    fertMat4 , hivFertPosBirth4 , hivFertNegBirth4 , ...
    dFertPos1 , dFertNeg1 , dFertMat1 , dFertPos2 , dFertNeg2 , dFertMat2 , ...
    dFertPos3 , dFertNeg3 , dFertMat3 , deathMat , deathMat2 , deathMat3 , deathMat4 , ...
    dDeathMat , dDeathMat2 , dDeathMat3 , dMue] = loadUp2(1 , 0 , [] , [] , []);

% Indices of calib runs to plot
% Temporarily commenting out to only run one scenario first to test out
% code
fileInds = {'6_1' , '6_2' , '6_3' , '6_6' , '6_8' , '6_9' , '6_11' , ...
     '6_12' , '6_13' , '6_15' , '6_20' , '6_21' , '6_22' , '6_26' , ...
    '6_27' , '6_32' , '6_34' , '6_35' , '6_38' , '6_39' , '6_40' , ...
    '6_41' , '6_42' , '6_45' , '6_47'};    % 22Apr20Ph2V11 ***************SET ME****************
% fileInds = {'6_1', '6_6' '6_8'}; # for testing
nRuns = length(fileInds);

monthlyTimespan = [startYear : timeStep : lastYear]; % list all the timespans in a vector
monthlyTimespan = monthlyTimespan(1 : end-1); % remove the very last date
monthlyTimespanFut = [endYear : timeStep : lastYear]; % screening time span starts at 2021
monthlyTimespanFut = monthlyTimespanFut(1 : end-1); 
nTimepoints = length(monthlyTimespan);
nTimepointsFut = length(monthlyTimespanFut); 

% Initialize result matrices 
deaths = zeros(nTimepoints, age+1, 3, nRuns, 10); % time, age (1:17), 3 death data elements, number of parameters, 10 scenarios
screenTreat = zeros(nTimepointsFut, age+1, 5, nRuns, 10); % time, age (1:16), 5 screen/treat data elements, number of parameters, 10 scenarios
hpvHealthState = zeros(nTimepoints, age+1, 10, nRuns, 10); % time, age (1:16), 10 HPV/CC health states, number of parameters, 10 scenarios
hivHealthState = zeros(nTimepoints, age+1, 7, nRuns, 10); % time, age (1:16), 7 HIV health states, number of parameters , 10 scenarios
totalPerAge = zeros(nTimepoints, age+1, nRuns, 10); % to pull the N per age group at each time point , 10 scenarios
vax = zeros(nTimepoints, age+1, nRuns, 10); % number of vaccinations is not stratified by age. only time and parameter.    , 10 scenarios   

for sceNum = 0 : 9 
    sceString = num2str(sceNum); % turn sceNum into string sceString

    % Feeding in the zeroed result matrix, spitting out the same matrix but with all the counts added in for that scenario
    [deaths, screenTreat, hpvHealthState, hivHealthState, totalPerAge, vax] = ...
        vaxCEA_multSims_SACEA_CH(1 , sceString , {'0'}, fileInds, deaths, screenTreat, hpvHealthState, hivHealthState, totalPerAge, vax); 
end 

% turn all the result matrices into 2D 
for sce = 1 : 10 
    for param = 1 : nRuns
        for a = 1 : age + 1 
            % turning deaths into 2D 
            for var = 1 : 3 
                if exist ('deathsReshape') == 0 
                    deathsReshape = [transpose(monthlyTimespan), a.*ones(nTimepoints,1), var.*ones(nTimepoints,1), ...
                                        param.*ones(nTimepoints,1), sce.*ones(nTimepoints,1), deaths(:, a, var, param, sce)];
                else
                    deathsReshape = [deathsReshape; ...
                                 transpose(monthlyTimespan), a.*ones(nTimepoints,1), var.*ones(nTimepoints,1), ...
                                 param.*ones(nTimepoints,1), sce.*ones(nTimepoints,1), deaths(:, a, var, param, sce)];
                end 
            end 
            % turning screening/treatment matrix into 2D
            for var = 1 : 5 
                if exist ('screenTreatReshape') == 0 
                    screenTreatReshape = [transpose(monthlyTimespanFut), a.*ones(nTimepointsFut,1), var.*ones(nTimepointsFut,1), ...
                                             param.*ones(nTimepointsFut,1), sce.*ones(nTimepointsFut,1), screenTreat(:, a, var, param, sce)];
                else
                    screenTreatReshape = [screenTreatReshape; ...
                                            transpose(monthlyTimespanFut), a.*ones(nTimepointsFut,1), var.*ones(nTimepointsFut,1), ...
                                             param.*ones(nTimepointsFut,1), sce.*ones(nTimepointsFut,1), screenTreat(:, a, var, param, sce)];
                end 
            end 
            % turning hpv/cc health states matrix into 2D
            for var = 1 : 10
                if exist ('hpvHealthStateReshape') == 0 
                    hpvHealthStateReshape = [transpose(monthlyTimespan), a.*ones(nTimepoints,1), var.*ones(nTimepoints,1), ...
                                             param.*ones(nTimepoints,1), sce.*ones(nTimepoints,1), hpvHealthState(:, a, var, param, sce)];
                else 
                    hpvHealthStateReshape = [hpvHealthStateReshape; 
                                            transpose(monthlyTimespan), a.*ones(nTimepoints,1), var.*ones(nTimepoints,1), ...
                                             param.*ones(nTimepoints,1), sce.*ones(nTimepoints,1), hpvHealthState(:, a, var, param, sce)];
                end
            end 
            % turning hiv health staes matrix into 2D 
            for var = 1 : 7
                if exist ('hivHealthStateReshape') == 0 
                    hivHealthStateReshape = [transpose(monthlyTimespan), a.*ones(nTimepoints,1), var.*ones(nTimepoints,1), ...
                                             param.*ones(nTimepoints,1), sce.*ones(nTimepoints,1), hivHealthState(:, a, var, param, sce)];
                else 
                    hivHealthStateReshape = [hivHealthStateReshape; 
                                            transpose(monthlyTimespan), a.*ones(nTimepoints,1), var.*ones(nTimepoints,1), ...
                                             param.*ones(nTimepoints,1), sce.*ones(nTimepoints,1), hivHealthState(:, a, var, param, sce)];
                end
            end 
            % turning total per age matrix into 2D 
            if (exist ('totalPerAgeReshape') == 0 || exist('vaxReshape') == 0)
                totalPerAgeReshape = [transpose(monthlyTimespan), a.*ones(nTimepoints,1), param.*ones(nTimepoints,1), ...
                                        sce.*ones(nTimepoints,1), totalPerAge(:, a, param, sce)]; 
                vaxReshape = [transpose(monthlyTimespan), a.*ones(nTimepoints,1), param.*ones(nTimepoints,1), ...
                                        sce.*ones(nTimepoints,1), vax(:, a, param, sce)];
            else 
                totalPerAgeReshape = [totalPerAgeReshape; 
                                        transpose(monthlyTimespan), a.*ones(nTimepoints,1), param.*ones(nTimepoints,1), ...
                                        sce.*ones(nTimepoints,1), totalPerAge(:, a, param, sce)]; 
                vaxReshape = [vaxReshape; 
                                        transpose(monthlyTimespan), a.*ones(nTimepoints,1), param.*ones(nTimepoints,1), ...
                                        sce.*ones(nTimepoints,1), vax(:, a, param, sce)]; 
            end 
        end
        disp(['Complete Scenario ', num2str(sce), ', Parameter ', num2str(param)])
    end
end

% turn into arrays
deathsReshape = array2table(deathsReshape, 'VariableNames', {'year', 'age', 'categ', 'paramNum', ...
        'sceNum', 'count'}); 
screenTreatReshape = array2table(screenTreatReshape, 'VariableNames', {'year', 'age', 'categ', 'paramNum', ...
        'sceNum', 'count'}); 
hpvHealthStateReshape = array2table(hpvHealthStateReshape, 'VariableNames', {'year', 'age', 'categ', 'paramNum', ...
        'sceNum', 'count'}); 
hivHealthStateReshape = array2table(hivHealthStateReshape, 'VariableNames', {'year', 'age', 'categ', 'paramNum', ...
        'sceNum', 'count'}); 
totalPerAgeReshape = array2table(totalPerAgeReshape, 'VariableNames', {'year', 'age', 'paramNum', ...
        'sceNum', 'count'}); 
vaxReshape = array2table(vaxReshape, 'VariableNames', {'year', 'age', 'paramNum', ...
        'sceNum', 'count'}); 

% spit out into CSV 
writetable(deathsReshape,[pwd '/SACEA/deaths.csv']);
writetable(screenTreatReshape, [pwd '/SACEA/screenTreat.csv']); 
writetable(hpvHealthStateReshape, [pwd '/SACEA/hpvHealthState.csv']); 
writetable(hivHealthStateReshape, [pwd '/SACEA/hivHealthState.csv']); 
writetable(totalPerAgeReshape, [pwd '/SACEA/totalPerAge.csv']);
writetable(vaxReshape, [pwd '/SACEA/vax.csv']);